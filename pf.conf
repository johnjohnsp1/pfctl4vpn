#
# com.apple anchor point
#
# Yeah, these intere with my setup. 
# scrub-anchor "com.apple/*"
# nat-anchor "com.apple/*"
# rdr-anchor "com.apple/*"as
dummynet-anchor "com.apple/*"
# anchor "com.apple/*"
load anchor "com.apple" from "/etc/pf.anchors/com.apple"

vpn=utun0
# This should probably include your inet interface as well.
en = "{ en0 en3 en4 en5 utun0 }"

# Local subnets that I'm sometimes on.
table <local> const { 127.0.0.0/24, 127.0.0.0/24 }
table <home> const { 127.0.0.0/24 }
table <TU> const { 127.0.0.0/24 }

# DNS servers that are allowed to use. 
table <dns> const { 127.0.0.1 }

# VPN servers.
table <vpn> const { 127.0.0.1 }



# Default block policy is sending a RST. This allows applications to quickly
# notice that they are not allowed to connect.
set block-policy return

# Allow traffic over local loopback and VPN interface.
set skip on { lo0 $vpn }

# Normalize all TCP packets (filter bad flags and stuff).
scrub in all

# Block all traffic by default, so we can create nice filters and exceptions.
block all

# Pass traffic over LAN. For extra security, you want to disable this and use specific 
# rules like for example for AFP:
# pass quick on $en proto tcp to 192.168.1.42 port 548
pass quick on $en from <home> to <home>  flags S/SA keep state

#pass on TU network
pass on $en proto { udp } to <TU>
pass on $en proto { udp } from <TU>

#pass DHCP requests
pass quick on $en proto udp to <local> port 5353
pass quick on $en proto udp from <local> port 5353
pass quick on $en proto udp from <local> port 67:68

# DNS servers
pass on $en proto { udp tcp } to <dns> port 53

# AirVPN servers
pass on $en proto { udp tcp } to <airvpn> port 443
pass on $en proto { udp tcp } from <airvpn> port 443

